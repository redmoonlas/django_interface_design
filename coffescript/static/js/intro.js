// Generated by CoffeeScript 1.9.2
(function() {
  var Balloon, Game, RensonsiveCanvas,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  RensonsiveCanvas = (function() {
    function RensonsiveCanvas(selector) {
      this.resize = bind(this.resize, this);
      this.canvas_ref = $(selector);
      this.canvas = this.canvas_ref.get(0);
      this.context = this.canvas.getContext('2d');
      this.resize();
      window.addEventListener('resize', this.resize);
    }

    RensonsiveCanvas.prototype.resize = function() {
      var container;
      container = $(this.canvas_ref).parent();
      this.canvas_ref.attr('width', $(container).width());
      return this.canvas_ref.attr('height', $(container).height());
    };

    return RensonsiveCanvas;

  })();

  Balloon = (function() {
    function Balloon(static_root) {
      this.sprite = new Image();
      this.sprite.src = static_root;
      this.sprite.width = 76;
      this.sprite.height = 213;
      this.x = 0;
      this.y = 0;
    }

    Balloon.prototype.updatePosition = function() {
      this.x = this.x + 3;
      return this.y = 10 * Math.sin(this.x);
    };

    return Balloon;

  })();

  Game = (function(superClass) {
    extend(Game, superClass);

    function Game(static_root) {
      this.mainloop = bind(this.mainloop, this);
      Game.__super__.constructor.call(this, '#chart');
      this.context.font = "20px Calibri";
      this.context.textAlign = "center";
      this.loopindex = 0;
      this.balloon = new Balloon(static_root);
      window.setInterval(this.mainloop, 200);
    }

    Game.prototype.updateCanvas = function() {
      this.loopindex = this.loopindex + 1;
      return this.balloon.updatePosition();
    };

    Game.prototype.drawBackgroud = function() {
      this.context.fillStyle = 'yellow';
      return this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
    };

    Game.prototype.drawBalloon = function() {
      var sprite;
      this.context.save();
      this.context.translate(this.balloon.x, this.balloon.y);
      sprite = this.balloon.sprite;
      this.context.drawImage(sprite, 0, 0, sprite.width, sprite.height, 0, 0, sprite.width, sprite.height);
      return this.context.restore();
    };

    Game.prototype.drawCanvas = function() {
      this.drawBackgroud();
      return this.drawBalloon();
    };

    Game.prototype.mainloop = function() {
      this.updateCanvas();
      return this.drawCanvas();
    };

    return Game;

  })(RensonsiveCanvas);

  this.game = Game;

}).call(this);
